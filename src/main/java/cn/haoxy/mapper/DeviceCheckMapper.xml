<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.haoxy.dao.DeviceCheckMapper">
  <resultMap id="BaseResultMap" type="cn.haoxy.model.DeviceCheck">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="device_id" jdbcType="INTEGER" property="deviceId" />
    <result column="check_person_id" jdbcType="INTEGER" property="checkPersonId" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="check_time" jdbcType="BIGINT" property="checkTime" />
    <result column="delete_mark" jdbcType="INTEGER" property="deleteMark" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, device_id, check_person_id, remark, status, check_time, delete_mark
  </sql>
  <select id="selectByExample" parameterType="cn.haoxy.model.DeviceCheckExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from device_check
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from device_check
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from device_check
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.haoxy.model.DeviceCheckExample">
    delete from device_check
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.haoxy.model.DeviceCheck">
    insert into device_check (id, device_id, check_person_id, 
      remark, status, check_time, 
      delete_mark)
    values (#{id,jdbcType=INTEGER}, #{deviceId,jdbcType=INTEGER}, #{checkPersonId,jdbcType=INTEGER}, 
      #{remark,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{checkTime,jdbcType=TIMESTAMP}, 
      #{deleteMark,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.haoxy.model.DeviceCheck">
    insert into device_check
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="deviceId != null">
        device_id,
      </if>
      <if test="checkPersonId != null">
        check_person_id,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="checkTime != null">
        check_time,
      </if>
      <if test="deleteMark != null">
        delete_mark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="deviceId != null">
        #{deviceId,jdbcType=INTEGER},
      </if>
      <if test="checkPersonId != null">
        #{checkPersonId,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="checkTime != null">
        #{checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleteMark != null">
        #{deleteMark,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.haoxy.model.DeviceCheckExample" resultType="java.lang.Long">
    select count(*) from device_check
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <select id="selectDeviceIdBySerial" parameterType="Map" resultType="java.lang.Integer">
    select t_d.id from device as t_d 
    where t_d.device_no = #{deviceNo,jdbcType=VARCHAR} 
      and t_d.location_id = #{locationId,jdbcType=INTEGER} 
      and t_d.quit_mark = -1
  </select>
  
  <select id="selectCheckOverTime" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        select 
            count(*)
        from 
            (select 
                dev.id as device_id,
                dev.type_id as type_id,
                dev.place_id as place_id,
                dev.device_no as device_no
            from device as dev
            where dev.quit_mark = -1 and dev.location_id = #{locationId,jdbcType=INTEGER}) 
            as t_device 
        right join 
            (select
                a.device_id as device_id, 
                b.checkTime as check_time,
                a.remark as remark  
            from 
                device_check as a , 
                (select 
                    device_id,max(check_time) as checkTime 
                from device_check where device_id
                 in (select id from device where device.location_id = #{locationId,jdbcType=INTEGER}) 
                 group by device_id) as b
            where a.check_time = b.checkTime and a.device_id = b.device_id ) 
              as t_check
        on t_device.device_id = t_check.device_id 
        where t_device.device_id is not null and UNIX_TIMESTAMP() * 1000 - t_check.check_time &gt; 86400000
  </select>
  
  <select id="selectDeviceCheckRecord" parameterType="java.lang.Integer" resultType="cn.haoxy.model.DeviceCheckRecordVo">
        select 
            t_device.device_id as deviceId,
            t_device.type_id as deviceTypeId,
            t_device.place_id as devicePlaceId,
            t_device.device_no as deviceNo,
            t_check.check_time as checkTime,
            t_device.type_name as deviceName,
            t_device.type_type as deviceType,
            t_device.place_place as devicePlace,
            t_check.remark as remark
        from 
            (select 
                dev.id as device_id,
                dev.type_id as type_id,
                dev.place_id as place_id,
                dev.device_no as device_no,
                type.name as type_name,
                type.type as type_type,
                plac.place as place_place
            from device as dev
            left join device_type as type on dev.type_id = type.id
            left join place as plac on dev.place_id = plac.id
            where dev.quit_mark = -1 and dev.location_id = #{locationId,jdbcType=INTEGER}) 
            as t_device 
        right join 
            (select
                a.device_id as device_id, 
                b.checkTime as check_time,
                a.remark as remark  
            from 
                device_check as a , 
                (select 
                    device_id,max(check_time) as checkTime 
                from device_check where device_id
                 in (select id from device where device.location_id = #{locationId,jdbcType=INTEGER}) 
                 group by device_id) as b
            where a.check_time = b.checkTime and a.device_id = b.device_id ) 
              as t_check
        on t_device.device_id = t_check.device_id 
        where t_device.device_id is not null 
  </select>
  
  <update id="updateByExampleSelective" parameterType="map">
    update device_check
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.deviceId != null">
        device_id = #{record.deviceId,jdbcType=INTEGER},
      </if>
      <if test="record.checkPersonId != null">
        check_person_id = #{record.checkPersonId,jdbcType=INTEGER},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.checkTime != null">
        check_time = #{record.checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deleteMark != null">
        delete_mark = #{record.deleteMark,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update device_check
    set id = #{record.id,jdbcType=INTEGER},
      device_id = #{record.deviceId,jdbcType=INTEGER},
      check_person_id = #{record.checkPersonId,jdbcType=INTEGER},
      remark = #{record.remark,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=VARCHAR},
      check_time = #{record.checkTime,jdbcType=TIMESTAMP},
      delete_mark = #{record.deleteMark,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.haoxy.model.DeviceCheck">
    update device_check
    <set>
      <if test="deviceId != null">
        device_id = #{deviceId,jdbcType=INTEGER},
      </if>
      <if test="checkPersonId != null">
        check_person_id = #{checkPersonId,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="checkTime != null">
        check_time = #{checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleteMark != null">
        delete_mark = #{deleteMark,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.haoxy.model.DeviceCheck">
    update device_check
    set device_id = #{deviceId,jdbcType=INTEGER},
      check_person_id = #{checkPersonId,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      check_time = #{checkTime,jdbcType=TIMESTAMP},
      delete_mark = #{deleteMark,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>